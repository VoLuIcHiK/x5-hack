from fastapi import FastAPI, HTTPException, BackgroundTasks
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import HTMLResponse
from pydantic import BaseModel
from typing import List, Optional
import asyncio
import os
import sys
import time
import logging
from concurrent.futures import ThreadPoolExecutor
import uvicorn
from functools import lru_cache
import json

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PYTHONPATH
current_dir = os.path.dirname(os.path.abspath(__file__))
sys.path.insert(0, current_dir)

# –ò–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏
try:
    from models.ner_model_enhanced import NERModel, EntityResult
    logger.info("‚úÖ Successfully imported NERModel")
except ImportError as e:
    logger.error(f"‚ùå Import error: {e}")
    sys.exit(1)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
app = FastAPI(
    title="üöÄ High-Performance NER Service",
    version="3.0.0",
    description="Optimized NER service for hackathon with <1s response time",
    docs_url="/docs",
    redoc_url="/redoc"
)

# CORS middleware –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
MODEL_INSTANCE = None
EXECUTOR = ThreadPoolExecutor(max_workers=4)  # –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è CPU-–∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á

def get_model_path():
    """–£–º–Ω—ã–π –ø–æ–∏—Å–∫ –ø—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏"""
    current_dir = os.path.dirname(os.path.abspath(__file__))
    
    possible_paths = [
        os.path.join(current_dir, "model_files"),
        "./model_files",
        "/app/model_files",
        os.path.expanduser("~/model_files"),
        "model_files"
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            logger.info(f"‚úÖ Found model directory: {path}")
            return path
    
    logger.warning("‚ùå Model directory not found, using fallback")
    return possible_paths[0]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ"""
    global MODEL_INSTANCE
    
    logger.info("üöÄ Starting High-Performance NER Service...")
    start_time = time.time()
    
    MODEL_PATH = get_model_path()
    logger.info(f"üìÇ Model path: {MODEL_PATH}")
    
    try:
        MODEL_INSTANCE = NERModel(model_dir=MODEL_PATH)
        logger.info("‚úÖ Model initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Error initializing model: {e}")
        MODEL_INSTANCE = NERModel(model_dir=None)  # Fallback
    
    init_time = time.time() - start_time
    logger.info(f"‚ö° Startup completed in {init_time:.2f}s")

# Pydantic –º–æ–¥–µ–ª–∏
class PredictRequest(BaseModel):
    input: str
    
    class Config:
        schema_extra = {
            "example": {
                "input": "–º–æ–ª–æ–∫–æ 3.2% 1 –ª–∏—Ç—Ä –î–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ"
            }
        }

class PredictResponse(BaseModel):
    entities: List[EntityResult]
    processing_time: float
    request_id: Optional[str] = None

class HealthResponse(BaseModel):
    status: str
    uptime: float
    model_loaded: bool
    response_time: float

# –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —á–∞—Å—Ç–æ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
@lru_cache(maxsize=1000)
def cached_predict(text: str):
    """–ö—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return MODEL_INSTANCE.extractor.predict(text)

# –û—Å–Ω–æ–≤–Ω–æ–π API endpoint - –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ô –î–õ–Ø –°–ö–û–†–û–°–¢–ò
@app.post("/api/predict", response_model=PredictResponse)
async def predict(request: PredictRequest):
    """
    üöÄ –í–´–°–û–ö–û–ü–†–û–ò–ó–í–û–î–ò–¢–ï–õ–¨–ù–´–ô ENDPOINT –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—É—â–Ω–æ—Å—Ç–µ–π
    
    –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è:
    - –í—Ä–µ–º—è –æ—Ç–∫–ª–∏–∫–∞ < 1 —Å–µ–∫—É–Ω–¥—ã
    - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    - –ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å –ø–æ–¥ –Ω–∞–≥—Ä—É–∑–∫–æ–π
    """
    start_time = time.time()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if not request.input or not request.input.strip():
        raise HTTPException(status_code=400, detail="Input text cannot be empty")
    
    if len(request.input) > 1000:  # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        raise HTTPException(status_code=400, detail="Input text too long (max 1000 characters)")
    
    try:
        # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –ø—É–ª–µ –ø–æ—Ç–æ–∫–æ–≤
        loop = asyncio.get_event_loop()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
        entities = await loop.run_in_executor(
            EXECUTOR,
            cached_predict,
            request.input.strip()
        )
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç EntityResult
        results = []
        for entity in entities:
            results.append(EntityResult(
                start_index=entity['start_index'],
                end_index=entity['end_index'],
                entity=entity['entity'],
                text=entity.get('text', request.input[entity['start_index']:entity['end_index']])
            ))
        
        processing_time = time.time() - start_time
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        logger.info(f"‚ö° Processed request in {processing_time:.3f}s, found {len(results)} entities")
        
        # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ
        if processing_time > 0.9:
            logger.warning(f"üêå Slow response: {processing_time:.3f}s")
        
        return PredictResponse(
            entities=results,
            processing_time=processing_time
        )
        
    except Exception as e:
        processing_time = time.time() - start_time
        logger.error(f"‚ùå Error processing request in {processing_time:.3f}s: {e}")
        raise HTTPException(
            status_code=500, 
            detail=f"Prediction failed: {str(e)}"
        )

# –û–±–ª–µ–≥—á–µ–Ω–Ω—ã–π health check –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
@app.get("/health", response_model=HealthResponse)
async def health():
    """–ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–∞"""
    start_time = time.time()
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞
    uptime = time.time() - startup_time if 'startup_time' in globals() else 0
    
    response_time = time.time() - start_time
    
    return HealthResponse(
        status="healthy" if MODEL_INSTANCE else "degraded",
        uptime=uptime,
        model_loaded=MODEL_INSTANCE is not None,
        response_time=response_time
    )

# –ü—Ä–æ—Å—Ç–∞—è –≥–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
@app.get("/", response_class=HTMLResponse)
async def root():
    """–ü—Ä–æ—Å—Ç–∞—è –¥–µ–º–æ-—Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>üöÄ High-Performance NER Service</title>
        <meta charset="utf-8">
        <style>
            body { font-family: Arial; max-width: 800px; margin: 50px auto; padding: 20px; }
            .container { background: #f8f9fa; padding: 30px; border-radius: 10px; }
            h1 { color: #2563eb; text-align: center; }
            .demo { background: white; padding: 20px; border-radius: 8px; margin: 20px 0; }
            code { background: #e5e7eb; padding: 2px 4px; border-radius: 3px; }
            .status { color: #059669; font-weight: bold; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ High-Performance NER Service</h1>
            <div class="status">‚úÖ Service is running and ready for hackathon!</div>
            
            <div class="demo">
                <h3>üì° API Usage</h3>
                <p><strong>Endpoint:</strong> <code>POST /api/predict</code></p>
                <p><strong>Example:</strong></p>
                <pre><code>curl -X POST "/api/predict" \\
     -H "Content-Type: application/json" \\
     -d '{"input": "–º–æ–ª–æ–∫–æ 3.2% 1 –ª–∏—Ç—Ä –î–æ–º–∏–∫ –≤ –¥–µ—Ä–µ–≤–Ω–µ"}'</code></pre>
            </div>
            
            <div class="demo">
                <h3>üéØ Performance Features</h3>
                <ul>
                    <li>‚ö° Response time &lt; 1 second</li>
                    <li>üîÑ Async processing</li>
                    <li>üìà Scalable under load</li>
                    <li>üåê Public access ready</li>
                </ul>
            </div>
            
            <div class="demo">
                <h3>üîó Useful Links</h3>
                <p><a href="/docs">üìñ API Documentation</a></p>
                <p><a href="/health">‚ù§Ô∏è Health Check</a></p>
            </div>
        </div>
    </body>
    </html>
    """

# Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫ (–¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–∞ —Ö–∞–∫–∞—Ç–æ–Ω–µ)
@app.get("/metrics")
async def metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    return {
        "service": "high-performance-ner",
        "version": "3.0.0",
        "model_loaded": MODEL_INSTANCE is not None,
        "cache_info": cached_predict.cache_info()._asdict(),
        "uptime": time.time() - startup_time if 'startup_time' in globals() else 0,
        "status": "production-ready"
    }

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –¥–ª—è uptime
startup_time = time.time()

if __name__ == "__main__":
    print("üöÄ Starting High-Performance NER Service for Hackathon!")
    print("="*60)
    print("üéØ Optimized for:")
    print("   ‚ö° Response time < 1 second")
    print("   üîÑ Async processing")
    print("   üìà High scalability")
    print("   üåê Public deployment ready")
    print("="*60)
    
    # –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ uvicorn –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    uvicorn.run(
        app,
        host="0.0.0.0",  # –ü—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø
        port=int(os.environ.get("PORT", 8000)),  # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
        workers=1,  # –û–¥–∏–Ω worker –¥–ª—è –Ω–∞—á–∞–ª–∞ (–º–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å)
        loop="asyncio",  # –ë—ã—Å—Ç—Ä—ã–π event loop
        http="httptools",  # –ë—ã—Å—Ç—Ä—ã–π HTTP parser
        log_level="info",
        access_log=True
    )